#version 430 core

layout(local_size_x = 32) in;

layout(std430, binding = 0) buffer VertexData {
    vec3 vertices[]; // Mesh vertices
};

layout(std430, binding = 1) buffer UVData {
    vec2 uvs[]; // UV coordinates of the vertices
};

// Normal map texture replaces normal data SSBO
uniform sampler2D heightMap; // The height map texture
uniform sampler2D normalMap; // Normal map texture
uniform float heightScale; // Scale to adjust the displacement
uniform vec2 uvScale; // Scaling factor for the UVs

void main() {
    uint index = gl_GlobalInvocationID.x; // Get the global invocation index

    // Ensure we don't go out of bounds
    if (index >= vertices.length()) {
        return; // Exit if out of bounds
    }

    // Get the UV coordinates for this vertex
    vec2 uv = uvs[index];

    // Apply UV scaling
    uv *= uvScale;

    // Sample the height map using the scaled UV coordinates
    float height = texture(heightMap, uv).r;

    // Sample normal from texture
    vec3 normal = texture(normalMap, uv).rgb;
    // Convert from [0,1] range to [-1,1] range
    normal = normalize(normal * 2.0 - 1.0);

    // Displace the vertex along the normal direction
    vertices[index] += normal * height * heightScale;
}
